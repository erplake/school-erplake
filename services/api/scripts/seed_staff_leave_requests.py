"""Seed sample staff leave requests.

Idempotent: skips inserting duplicate (staff_id,start_date,end_date) combos.
Usage:
  python scripts/seed_staff_leave_requests.py
"""
from __future__ import annotations
import random
import datetime as dt
import sqlalchemy as sa

DSN = "postgresql://erplake:erplake@localhost:5544/schooldb"

LEAVE_TYPES = ["Sick", "Casual", "Earned", "Maternity", "Paternity"]


def main():
    engine = sa.create_engine(DSN, future=True)
    today = dt.date.today()
    with engine.begin() as conn:
        staff_ids = [r[0] for r in conn.execute(sa.text("SELECT id FROM staff ORDER BY id LIMIT 25")).fetchall()]
        if not staff_ids:
            print("[seed] No staff rows present; run staff seed first.")
            return
        inserted = 0
        for sid in staff_ids:
            # Generate up to 2 leave windows
            for offset in (random.randint(1, 20), random.randint(25, 40)):
                start = today + dt.timedelta(days=offset)
                length = random.randint(1, 3)
                end = start + dt.timedelta(days=length - 1)
                leave_type = random.choice(LEAVE_TYPES)
                status = random.choice(["Pending", "Approved", "Rejected"])  # mix statuses
                exists = conn.execute(
                    sa.text(
                        """
                        SELECT 1 FROM staff_leave_requests
                        WHERE staff_id=:sid AND start_date=:sd AND end_date=:ed
                        """
                    ),
                    {"sid": sid, "sd": start, "ed": end},
                ).fetchone()
                if exists:
                    continue
                conn.execute(
                    sa.text(
                        """
                        INSERT INTO staff_leave_requests (staff_id,start_date,end_date,type,status,reason)
                        VALUES (:sid,:sd,:ed,:type,:status,:reason)
                        """
                    ),
                    {
                        "sid": sid,
                        "sd": start,
                        "ed": end,
                        "type": leave_type,
                        "status": status,
                        "reason": f"Autogenerated {leave_type} leave",
                    },
                )
                inserted += 1
        print(f"[seed] Inserted {inserted} leave requests (idempotent run).")


if __name__ == "__main__":  # pragma: no cover
    main()
