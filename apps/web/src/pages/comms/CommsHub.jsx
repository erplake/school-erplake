import React, { useMemo, useState, useEffect } from 'react';

function cn(...a){return a.filter(Boolean).join(' ');} 
const nowTs=()=>new Date().getTime();
const hoursAgo=h=> nowTs()-h*3600_000;

// Sample data (trimmed version)
const SAMPLE_STUDENTS=[
  {id:1,name:'Aarav Sharma',wing:'Primary',klass:'IV',section:'A',route:'R1',parent:'R. Sharma',phone:'+919876543210',wa_opt_in:true,last_inbound_at:hoursAgo(2),fee_due:false},
  {id:2,name:'Ananya Verma',wing:'Primary',klass:'IV',section:'A',route:'R1',parent:'S. Verma',phone:'+919876543211',wa_opt_in:true,last_inbound_at:hoursAgo(49),fee_due:true},
  {id:3,name:'Vihaan Mehta',wing:'Primary',klass:'IV',section:'B',route:'R2',parent:'P. Mehta',phone:'+919876543212',wa_opt_in:false,last_inbound_at:hoursAgo(10),fee_due:true}
];
const WA_TEMPLATES_INIT=[{id:'closure',name:'School Closure',category:'Utility',body:'Dear {parent_name}, {school_name} closed on {date}.',placeholders:['parent_name','school_name','date']}];
const SMS_TEMPLATES_INIT=[{id:'sms_fee',name:'DLT Fee Reminder',header:'SCHLID',templateId:'110716XXXXXXX',body:'Dear {parent_name}, fee due {due_date} - {school_name}'}];

function replacePlaceholders(body,map){return body.replace(/\{(.*?)\}/g,(_,k)=> (map[k]??`{${k}}`));}
function within24h(ts){return (nowTs()-ts)<=24*3600_000;}
const Tag=({children})=> <span className="inline-flex items-center rounded-full bg-gray-100 text-gray-700 px-2 py-0.5 text-xs border">{children}</span>;
const Stat=({label,value,sub})=> <div className="rounded-2xl border bg-white p-4 shadow-sm"><div className="text-2xl font-semibold">{value}</div><div className="text-sm text-gray-500">{label}</div>{sub&&<div className="mt-1 text-xs text-gray-400">{sub}</div>}</div>;
const Section=({title,desc,children,aside})=> <div className="rounded-3xl border bg-white p-5 shadow-sm"><div className="flex items-start justify-between gap-4"><div><h2 className="text-lg font-semibold">{title}</h2>{desc&&<p className="text-sm text-gray-500 mt-1">{desc}</p>}</div>{aside}</div><div className="mt-4">{children}</div></div>;

export default function CommsHub(){
  const [tab,setTab]=useState('Broadcast');
  const [wing,setWing]=useState('');
  const [klass,setKlass]=useState('');
  const [section,setSection]=useState('');
  const [onlyFeeDue,setOnlyFeeDue]=useState(false);
  const [mode,setMode]=useState('template');
  const [waTemplates,setWaTemplates]=useState(WA_TEMPLATES_INIT);
  const [templateId,setTemplateId]=useState('closure');
  const [placeholders,setPlaceholders]=useState({school_name:'Springfield Public School'});
  const [freeForm,setFreeForm]=useState('');
  const [previewIdx,setPreviewIdx]=useState(0);
  const [fallbackMinutes,setFallbackMinutes]=useState(20);
  const [smsTemplates]=useState(SMS_TEMPLATES_INIT);
  const [jobs,setJobs]=useState([]);
  const template=waTemplates.find(t=>t.id===templateId)||waTemplates[0];

  const recipients=useMemo(()=> SAMPLE_STUDENTS.filter(s=> (!wing||s.wing===wing)&&(!klass||s.klass===klass)&&(!section||s.section===section)&&(!onlyFeeDue||s.fee_due)),[wing,klass,section,onlyFeeDue]);
  useEffect(()=>{setPreviewIdx(0);},[recipients.length]);

  const previewText=useMemo(()=>{if(mode==='free') return freeForm; const s=recipients[previewIdx]; return replacePlaceholders(template.body,{parent_name:s?.parent||'Parent', school_name:placeholders.school_name, date:'DATE'});},[mode,freeForm,template,placeholders,recipients,previewIdx]);

  function startBroadcast(){ const list=recipients.map((s,i)=>({id:`job-${Date.now()}-${i}`,parent:s.parent,student:s.name,channel:'wa',status:'queued',fallback:false})); setJobs(list); simulate(list); }
  function simulate(list){ list.forEach((job,i)=> setTimeout(()=> setJobs(j=> j.map(x=> x.id===job.id? {...x,status:'sent'}:x)), 120+ i*60)); }

  const counts=useMemo(()=>{const total=recipients.length; const wa=recipients.filter(r=>r.wa_opt_in).length; const win=recipients.filter(r=> within24h(r.last_inbound_at)).length; return {total,wa,win};},[recipients]);

  return <div className="min-h-screen bg-gray-50 text-gray-900 p-6"><div className="mx-auto max-w-7xl space-y-6"><header className="flex items-center justify-between"><div><h1 className="text-2xl font-bold">Comms Hub</h1><p className="text-sm text-gray-500">Broadcast & parent messaging (demo)</p></div><div className="flex items-center gap-4"><Tag>WhatsApp</Tag><Tag>SMS Fallback</Tag></div></header><div className="mt-4 rounded-2xl border bg-white p-1 flex gap-1 w-full max-w-xl">{['Broadcast','Templates','Settings'].map(t=> <button key={t} onClick={()=>setTab(t)} className={cn('flex-1 rounded-xl px-3 py-2 text-sm', tab===t?'bg-gray-900 text-white':'bg-white hover:bg-gray-50')}>{t}</button>)}</div>{tab==='Broadcast' && (<><div className="grid grid-cols-1 lg:grid-cols-4 gap-4"><Stat label="Recipients" value={counts.total} sub={`${counts.wa} WA · ${counts.win} win24h`} /><Stat label="Queued jobs" value={jobs.filter(j=>j.status==='queued').length} /><Stat label="Sent" value={jobs.filter(j=>j.status==='sent').length} /><Stat label="Fallback used" value={jobs.filter(j=>j.fallback).length} /></div><Section title="Audience" desc="Filter your recipients."><div className="flex flex-wrap gap-3 items-end"> <div><label className="block text-xs text-gray-500">Wing</label><select className="rounded-xl border px-3 py-2" value={wing} onChange={e=>setWing(e.target.value)}><option value="">Any</option>{Array.from(new Set(SAMPLE_STUDENTS.map(s=>s.wing))).map(w=> <option key={w}>{w}</option>)}</select></div><div><label className="block text-xs text-gray-500">Class</label><select className="rounded-xl border px-3 py-2" value={klass} onChange={e=>setKlass(e.target.value)}><option value="">Any</option>{Array.from(new Set(SAMPLE_STUDENTS.map(s=>s.klass))).map(w=> <option key={w}>{w}</option>)}</select></div><div><label className="block text-xs text-gray-500">Section</label><select className="rounded-xl border px-3 py-2" value={section} onChange={e=>setSection(e.target.value)}><option value="">Any</option>{Array.from(new Set(SAMPLE_STUDENTS.map(s=>s.section))).map(w=> <option key={w}>{w}</option>)}</select></div><label className="inline-flex items-center gap-2 text-sm"><input type="checkbox" checked={onlyFeeDue} onChange={e=>setOnlyFeeDue(e.target.checked)} /> Fees due only</label><div className="ml-auto text-xs text-gray-500">{recipients.length} recipients</div></div></Section><Section title="Composer" desc="Template enforced outside 24h window."><div className="space-y-3"><div className="flex items-center gap-3"><span className={cn('px-3 py-1 rounded-full text-xs border', mode==='template'?'bg-emerald-50 border-emerald-200 text-emerald-700':'bg-gray-100 text-gray-600')}>Template</span><label className="inline-flex items-center gap-2 text-sm"><input type="checkbox" checked={mode==='free'} onChange={e=> setMode(e.target.checked?'free':'template')} /> Free-form (24h)</label></div>{mode==='template' && (<div className="grid md:grid-cols-3 gap-3"><div><label className="block text-xs text-gray-500">Template</label><select className="w-full rounded-xl border px-3 py-2" value={templateId} onChange={e=>setTemplateId(e.target.value)}>{waTemplates.map(t=> <option key={t.id} value={t.id}>{t.name}</option>)}</select></div><div className="md:col-span-2 grid grid-cols-2 gap-3">{(template.placeholders||[]).slice(0,6).map(ph=> <div key={ph}><label className="block text-xs text-gray-500">{ph}</label><input className="w-full rounded-xl border px-3 py-2" value={placeholders[ph]||''} placeholder={`{${ph}}`} onChange={e=> setPlaceholders(p=>({...p,[ph]:e.target.value}))} /></div>)}</div></div>)}{mode==='free' && (<div><label className="block text-xs text-gray-500">Message</label><textarea className="w-full rounded-xl border px-3 py-2 h-28" value={freeForm} onChange={e=>setFreeForm(e.target.value)} /></div>)}<div className="grid grid-cols-1 md:grid-cols-3 gap-3"><div><label className="block text-xs text-gray-500">Fallback after (min)</label><input type="number" className="w-full rounded-xl border px-3 py-2" value={fallbackMinutes} onChange={e=> setFallbackMinutes(parseInt(e.target.value||'0')||1)} /></div><div className="md:col-span-2 rounded-xl border p-3 bg-gray-50"><div className="flex items-center justify-between text-xs text-gray-500"><span>Preview</span><span>{recipients[previewIdx]? recipients[previewIdx].parent: '—'}</span></div><div className="mt-2 h-28 overflow-auto text-sm whitespace-pre-wrap">{previewText || '(Nothing yet)'}</div><div className="flex items-center justify-between mt-1"><button className="text-xs underline disabled:text-gray-300" disabled={previewIdx<=0} onClick={()=> setPreviewIdx(i=> Math.max(0,i-1))}>Prev</button><button className="text-xs underline disabled:text-gray-300" disabled={previewIdx>=recipients.length-1} onClick={()=> setPreviewIdx(i=> Math.min(recipients.length-1,i+1))}>Next</button></div></div></div><div className="flex items-center gap-3 pt-2"><button className="rounded-2xl bg-gray-900 text-white px-4 py-2 disabled:opacity-50" disabled={!recipients.length} onClick={startBroadcast}>Send to {recipients.length}</button><span className="text-xs text-gray-500">WA-first, SMS fallback demo only.</span></div></div></Section><Section title="Delivery Board" desc="Recent job statuses."><div className="rounded-2xl border overflow-hidden"><table className="w-full text-sm"><thead className="bg-gray-50 text-gray-600"><tr className="text-left"><th className="py-2 px-3">Parent</th><th className="px-3">Student</th><th className="px-3">Channel</th><th className="px-3">Status</th></tr></thead><tbody>{jobs.map(j=> <tr key={j.id} className="border-t"><td className="py-2 px-3">{j.parent}</td><td className="px-3">{j.student}</td><td className="px-3 uppercase">{j.channel}</td><td className="px-3">{j.status}</td></tr>)}{jobs.length===0 && <tr><td className="py-6 text-center text-gray-500" colSpan={4}>No jobs yet.</td></tr>}</tbody></table></div></Section></>)}{tab==='Templates' && (<div className="space-y-4"><div className="rounded-2xl border bg-white p-3"><h2 className="text-sm font-medium mb-2">WhatsApp Templates</h2><ul className="text-sm space-y-1">{waTemplates.map(t=> <li key={t.id}>{t.name} – {t.category}</li>)}</ul></div><div className="rounded-2xl border bg-white p-3"><h2 className="text-sm font-medium mb-2">SMS Templates</h2><ul className="text-sm space-y-1">{smsTemplates.map(t=> <li key={t.id}>{t.name} – {t.header}</li>)}</ul></div></div>)}{tab==='Settings' && (<div className="space-y-4"><div className="rounded-2xl border bg-white p-3"><h2 className="text-sm font-medium mb-2">Channel Settings (demo)</h2><p className="text-xs text-gray-600">Configure provider + compliance here in full version.</p></div></div>)}<footer className="text-xs text-gray-500 text-center py-6">Demo only. No real messages sent.</footer></div></div>;
}
